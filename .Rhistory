data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?",
check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
data_sub <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data)
datetime <- paste(as.Date(data_sub$Date), data_sub$Time)
data_sub$Datetime <- as.POSIXct(datetime,)
png(filename="plot2.png",width=480,height=480,units = "px")
Sys.setlocale("LC_TIME", "English") ## x axis time values in english
plot(data_sub$Global_active_power~data_sub$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
data <- read.csv("./Data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## Subsetting the data
data_sub <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data)
## Converting dates
datetime <- paste(as.Date(data_sub$Date), data_sub$Time)
data$Datetime <- as.POSIXct(datetime)
png(filename="plot3.png",width=480,height=480,units = "px")
Sys.setlocale("LC_TIME", "English") ## x axis time values in english
with(data_sub, {
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
data <- read.csv("./Data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## Subsetting the data
data_sub <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data)
## Converting dates
datetime <- paste(as.Date(data_sub$Date), data_sub$Time)
data$Datetime <- as.POSIXct(datetime)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
png(filename="plot4.png",width=480,height=480,units = "px")
Sys.setlocale("LC_TIME", "English") ## x axis time values in english
with(data_sub, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
dev.off()
data <- read.csv("./Data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## Subsetting the data
data_sub <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data)
png(filename="plot4.png",width=480,height=480,units = "px")
Sys.setlocale("LC_TIME", "English") ## x axis time values in english
## Converting dates
datetime <- paste(as.Date(data_sub$Date), data_sub$Time)
data$Datetime <- as.POSIXct(datetime)
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data_sub, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
dev.off()
myFile<-read.csv("./household_power_consumption.txt",sep=";",header=T,na.strings="?")
extract<-myFile[myFile$Date=="1/2/2007" | myFile$Date=="2/2/2007",]
newtime <-(strptime(paste(extract$Date, extract$Time), "%d/%m/20%y %H:%M:%S"))
extract<-cbind(extract,newtime)
par(mfrow = c(2, 2), mar = c(4, 4, 0, 0))
with(extract, plot(newtime ,Global_active_power, type="l",xlab="",ylab="Global active power"))
with(extract, plot(newtime ,Voltage, type="l",xlab="datetime",ylab="Voltage"),breaks=100)
with(extract, plot(newtime ,Sub_metering_1,type="l",xlab="",ylab="Energy Sub Metering"))
with(extract, lines(newtime ,Sub_metering_2,col="red", type="l",xlab="",ylab="Energy Sub Metering"))
with(extract, lines(newtime ,Sub_metering_3,col="blue", type="l",xlab="",ylab="Energy Sub Metering"))
legend("topright",lty=1,col=c("black","red","blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
with(extract, plot(newtime ,Global_reactive_power, type="l",xlab="datetime",ylab="Global_reactive_power"),breaks=10000)
dev.copy(png,file="plot5.png")
dev.off()
}
qnorm(.95,mean=1100,sd=75)
1100+c(-1,1)*qnorm(0.95)*75/10
(1/12000)^0.5
1100+c(-1,1)*qnorm(0.975)*75/10
qnorm(.975,mean=1100,sd=75)
(1/1200)^0.5
ppois(10,lambda=5*3)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
myapp <- oauth_app("github", "d4d4af03b70a4251b79e","8facb67ce5398437b29f3e8814184cd3800c5080")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <-aef76e7bde7d114957fadb9cc41bac77589563f0
github_token <-"aef76e7bde7d114957fadb9cc41bac77589563f0"
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos, gtoken)
stop_for_status(req)
content(req)
q
""
")
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
oauth_endpoints("github")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
myapp <- oauth_app("github", "d4d4af03b70a4251b79e")
myapp <- oauth_app("github", Client_ID="d4d4af03b70a4251b79e",client_Secret="8facb67ce5398437b29f3e8814184cd3800c5080")
myapp <- oauth_app("github", "d4d4af03b70a4251b79e","8facb67ce5398437b29f3e8814184cd3800c5080")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
Sys.setenv()
Sys.setenv(si)
sig=sign_oauth1.0(myapp,token="aef76e7bde7d114957fadb9cc41bac77589563f0")
homeTL=GET("https://api.github.com/users/jtleek/repos",sig)
json1=content(homeTL)
install.package(jsonlite)
install.packages(jsonlite)
install.packages("jsonlite")
json1=content(homeTL)
json2=jsonlite::fromJSON(toJSON(json1))
json2=jsonlite::fromJSON(tojson(json1))
json2=jsonlite::fromJSON(to json(json1))
json2=jsonlite::fromJSON(json1)
json2=jsonlite::fromJSON(toJSON(json1))
json2=jsonlite::fromJSON(toJSON(json1))
json2=jsonlite::fromJSON(to JSON(json1))
json2=jsonlite::fromJSON(toJSON(json1))
??jsonlite
oauth_endpoints("github")
myapp <- oauth_app("github", "d4d4af03b70a4251b79e")
myapp <- oauth_app("github", "d4d4af03b70a4251b79e","8facb67ce5398437b29f3e8814184cd3800c5080")
sig=sign_oauth1.0(myapp,token="aef76e7bde7d114957fadb9cc41bac77589563f0")
homeTL=GET("https://api.github.com/users/jtleek/repos",sig)
library(jsonlite)
#读取json
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
#转为json
iris<-data.frame(foo=1:4,bar=c(T,T,F,F))
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
install.packages("sqldf")
acs<-read.csv(D:\\My Documents\\Downloads\\getdata_data_ss06pid.csv)
acs<-read.csv("D:\\My Documents\\Downloads\\getdata_data_ss06pid.csv")
sqldf("select * from acs where AGEP < 50")
??sqldf
library("sqldf", lib.loc="E:/Program Files/R-3.1.0/library")
sqldf("select * from acs where AGEP < 50")
??sqldf
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
a=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmcode=readlines(a)
htmcode=readLines(a)
close(a)
library(XML)
url="http://biostat.jhsph.edu/~jleek/contact.html"
HTML<-htmlTreeParse(url,useInternalNodes=T)
HTML
HTML[10,]
a[10,]
nchar(Html)
nchar(TML)
nchar(HTML)
HTML<-htmlTreeParse(url,useInternalNodes=F)
HTML[10,]
htmcode
htmcode[10,]
htmcode[,10]
type(htmlcode)
htmcode[10]
nchar(htmcode[10])
nchar(htmcode[20])
nchar(htmcode[30])
nchar(htmcode[1000])
nchar(htmcode[100])
read.table(D:\\My Documents\\Downloadsgetdata_wksst8110.for)
read.table("D:\\My Documents\\Downloadsgetdata_wksst8110.for")
read.table("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
QFive<-read.table("D:\\My Documents\\Downloads\\getdata_wksst8110.for",fill = F)
read.for("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
??read.for
read.f("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",widths=8)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",widths=8)
View(Qfive)
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=100)
View(Qfive)
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=100)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for")
install.packages("descr")
View(Qfive)
View(Qfive)
View(Qfive)
fwf2csv(Qfive,"./Qfive.csv")
??fwf2csv
lib(descr)
library(descr)
fwf2csv(Qfive,"./Qfive.csv")
fwf2csv(Qfive,"./Qfive.csv",c("week","nino1+2","nino3"."nino34","nino4"))
fwf2csv(Qfive,"./Qfive.csv",1,)
fwf2csv(Qfive,"./Qfive.csv",3,5,1000)
fwf2csv("D:\\My Documents\\Downloads\\getdata_wksst8110.for","./Qfive.csv",3,5,1000)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(9,8,8,8,8))
View(Qfive)
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(10,10,10,10,10))
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(10,13,13,13,13))
View(Qfive)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(10,9,4,9,4,9,4,9,4))
View(Qfive)
sum<-Qfive[5:1000,2]
sum
sum<-Qfive[5:1000,4]
number<sum(sum)
number<-sum(sum)
sum
sum<-Qfive[5:1000,4]
apply(sum,2,mean)
mode(sum)
sum(sum)
sum<-as.vector(sum)
sum(sum)
sum<-as.numeric(sum)
sum(sum)
sum<-Qfive[5:1000,8]
sum<-as.numeric(sum)
sum(sum)
sumTA<-Qfive[5:1000,9]
sumTA<-as.numeric(sumTA)
sum(sum)+sum(sumTA)
sumTA<-Qfive[5:1000,7]
sum<-Qfive[5:1000,6]
sumTA<-as.numeric(sumTA)
sum<-as.numeric(sum)
sum(sum)+sum(sumTA)
sum(sum)
sum<-Qfive[5:1000,4]
sum<-as.numeric(sum)
sum(sum)
sum<-as.numeric(as.vector(Qfive[5:1000,6]))
sum(sum)
sumTA<-as.numeric(as.vector(Qfive[5:1000,7]))
sum(sum)+sum(sumTA)
sum<-as.numeric(as.vector(Qfive[5:1000,4]))
sum(sum)
Qfive<-read.fwf("D:\\My Documents\\Downloads\\getdata_wksst8110.for",width=c(10,9,4,9,4,9,4,9,4))
View(Qfive)
View(Qfive)
library(nlme)
library(lattice)
a<-xyplot(weight ~ Time | Diet, BodyWeight)
print(a)
inatall.packages(c("knitr","markdown"))
inatall.Packages(c("knitr","markdown"))
install.packages(c("knitr","markdown"))
n=9;mean=1100;s=30
mean+c(-1.1)*qt(0.975,n-1)*s/sqrt(9)
mean+c(-1,1)*qt(0.975,n-1)*s/sqrt(9)
qt(0.9758)
qt(0.975,8)
n1=n2=10;sd1=0.6;sd2=0.68;m1=3;m2=5
sp=sqrt((n1-1)*sd1^2+(n2-1)*sd2^2)/(n1+n2-2)
md=m1-m2
md+c(-1,1)*qt(0.975,n1+n2-2)*sp*sqrt(1/n1+1/n2)
sp=sqrt((n1-1)*sd1^2+(n2-1)*sd2^2)/(n1+n2-2))
sp=sqrt(((n1-1)*sd1^2+(n2-1)*sd2^2)/(n1+n2-2))
md+c(-1,1)*qt(0.975,n1+n2-2)*sp*sqrt(1/n1+1/n2)
if (!file.exists("stormData.csv.bz2")){
setInternet2(use = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "stormData.csv.bz2")
}
df= read.csv(bzfile("stormData.csv.bz2"))
rawStorm = read.csv(bzfile("StormData.csv.bz2), as.is = TRUE, header = TRUE)
rawStorm = read.csv(bzfile("StormData.csv.bz2"), as.is = TRUE, header = TRUE)
rawStorm = read.csv(bzfile("StormData.csv.bz2"), as.is = TRUE, header = TRUE)
library(stringr)
library(dplyr)
library(reshape2)
library(ggplot2)
setwd("H:\\许晟\\Rprogramming\\Github\\RepData_PeerAssessment2")
library(stringr)
library(dplyr)
library(reshape2)
library(ggplot2)
if (!file.exists("stormData.csv.bz2")){
setInternet2(use = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "stormData.csv.bz2")
}
rawStorm = read.csv("StormData.csv",header = TRUE, sep = ",")
summary(rawStorm)
rawStorm$PROPDMGEXP = tolower(rawStorm$PROPDMGEXP)
rawStorm$PROPDMGEXP = gsub('-', 0, rawStorm$PROPDMGEXP)
rawStorm$PROPDMGEXP = gsub('h', 2, rawStorm$PROPDMGEXP)
rawStorm$PROPDMGEXP = gsub('k', 3, rawStorm$PROPDMGEXP)
rawStorm$PROPDMGEXP = gsub('m', 6, rawStorm$PROPDMGEXP)
rawStorm$PROPDMGEXP = gsub('b', 9, rawStorm$PROPDMGEXP)
rawStorm$PROPDMGEXP = as.numeric(rawStorm$PROPDMGEXP)
rawStorm$PROPDMGEXP[is.na(rawStorm$PROPDMGEXP) == TRUE] = 0
# calculate new property damage
rawStorm$propDamage = ( rawStorm$PROPDMG * ( 10 ^ rawStorm$PROPDMGEXP ) )
View(rawStorm)
rawStorm$PROPDMGEXP[is.na(rawStorm$PROPDMGEXP) == TRUE] = 0
rawStorm$propDamage = ( rawStorm$PROPDMG * ( 10 ^ rawStorm$PROPDMGEXP ) )
rawStorm$propDamage = ( as.numeric(rawStorm$PROPDMG) * ( 10 ^ rawStorm$PROPDMGEXP ) )
# create data frame of total and average population harms by event type
harmByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalFatalities = sum(FATALITIES), totalInjuries = sum(INJURIES),
avgFatalities = totalFatalities / cntEvents, avgInjuries = totalInjuries / cntEvents )
# order by occurence of event
harmByEvent = arrange(harmByEvent, -cntEvents)
# convert event types to lowercase format
harmByEvent$EVTYPE = paste0( tolower(harmByEvent$EVTYPE), " (", harmByEvent$cntEvents, ")" )
# plot top ten
# create plot data frame and melt (for easier plotting)
dfPlot = melt(harmByEvent[1:10,][c('EVTYPE', 'avgFatalities', 'avgInjuries')], id.vars='EVTYPE')
dfPlot = arrange(dfPlot, variable, -value)
# plot top ten events
ggplot(dfPlot, aes(x = EVTYPE, y = value, color = variable)) +
geom_point(stat = 'identity', size = 3) +
scale_x_discrete(limits = dfPlot$EVTYPE[1:10]) +
coord_flip() +
xlab('event type (n)') + ylab('average harms per event') +
theme_bw() +
ggtitle('average harms (injuries/fatalities)\nby event type')
# create data frame of property damage by event type
costByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalPropDamage = sum(propDamage), avgPropDamage = totalPropDamage / cntEvents )
# order by occurence of event
costByEvent = arrange(costByEvent, -cntEvents)
# convert event types to lowercase format
costByEvent$EVTYPE = paste0( tolower(costByEvent$EVTYPE), " (", costByEvent$cntEvents, ")" )
# plot top ten
# create plot data frame
dfCostPlot = costByEvent[1:10, ]
dfCostPlot = arrange(dfCostPlot, -avgPropDamage)
# plot top ten events
ggplot(dfCostPlot, aes(x = EVTYPE, y = avgPropDamage) ) +
geom_bar(stat = 'identity') +
scale_x_discrete(limits = dfCostPlot$EVTYPE[1:10]) +
coord_flip() +
xlab('event type (n)') + ylab('average property damage per event') +
theme_bw() + ggtitle('average property damage\nby event type')
# create data frame of total and average population harms by event type
harmByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalFatalities = sum(FATALITIES), totalInjuries = sum(INJURIES),
avgFatalities = totalFatalities / cntEvents, avgInjuries = totalInjuries / cntEvents )
# order by occurence of event
harmByEvent = arrange(harmByEvent, -cntEvents)
# convert event types to lowercase format
harmByEvent$EVTYPE = paste0( tolower(harmByEvent$EVTYPE), " (", harmByEvent$cntEvents, ")" )
# plot top ten
# create plot data frame and melt (for easier plotting)
dfPlot = melt(harmByEvent[1:10,][c('EVTYPE', 'avgFatalities', 'avgInjuries')], id.vars='EVTYPE')
dfPlot = arrange(dfPlot, variable, -value)
# plot top ten events
ggplot(dfPlot, aes(x = EVTYPE, y = value, color = variable)) +
geom_point(stat = 'identity', size = 3) +
scale_x_discrete(limits = dfPlot$EVTYPE[1:10]) +
coord_flip() +
xlab('event type (n)') + ylab('average harms per event') +
theme_bw() +
ggtitle('average harms (injuries/fatalities)\nby event type')
# create data frame of total and average population harms by event type
harmByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalFatalities = sum(FATALITIES), totalInjuries = sum(INJURIES),
avgFatalities = totalFatalities / cntEvents, avgInjuries = totalInjuries / cntEvents )
# order by occurence of event
harmByEvent = arrange(harmByEvent, -cntEvents)
# convert event types to lowercase format
harmByEvent$EVTYPE = paste( tolower(harmByEvent$EVTYPE), " (", harmByEvent$cntEvents, ")" )
# plot top ten
# create plot data frame and melt (for easier plotting)
dfPlot = melt(harmByEvent[1:10,][c('EVTYPE', 'avgFatalities', 'avgInjuries')], id.vars='EVTYPE')
dfPlot = arrange(dfPlot, variable, -value)
# plot top ten events
ggplot(dfPlot, aes(x = EVTYPE, y = value, color = variable)) +
geom_point(stat = 'identity', size = 3) +
scale_x_discrete(limits = dfPlot$EVTYPE[1:10]) +
coord_flip() +
xlab('event type (n)') + ylab('average harms per event') +
theme_bw() +
ggtitle('average harms (injuries/fatalities)\nby event type')
summarize(cntEvents = n(), totalFatalities = sum(FATALITIES), totalInjuries = sum(INJURIES),
avgFatalities = totalFatalities / cntEvents, avgInjuries = totalInjuries / cntEvents )
library(dplyr)
library(reshape2)
library(ggplot2)
library(stringr)
costByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalPropDamage = sum(propDamage), avgPropDamage = totalPropDamage / cntEvents )
# create data frame of property damage by event type
costByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalPropDamage = sum(propDamage), avgPropDamage = totalPropDamage / cntEvents )
# order by occurence of event
costByEvent = arrange(costByEvent, -cntEvents)
# convert event types to lowercase format
costByEvent$EVTYPE = paste0( tolower(costByEvent$EVTYPE), " (", costByEvent$cntEvents, ")" )
# plot top ten
# create plot data frame
dfCostPlot = costByEvent[1:10, ]
dfCostPlot = arrange(dfCostPlot, -avgPropDamage)
# plot top ten events
ggplot(dfCostPlot, aes(x = EVTYPE, y = avgPropDamage) ) +
geom_bar(stat = 'identity') +
scale_x_discrete(limits = dfCostPlot$EVTYPE[1:10]) +
coord_flip() +
xlab('event type (n)') + ylab('average property damage per event') +
theme_bw() + ggtitle('average property damage\nby event type')
# create data frame of total and average population harms by event type
harmByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalFatalities = sum(FATALITIES), totalInjuries = sum(INJURIES),
avgFatalities = totalFatalities / cntEvents, avgInjuries = totalInjuries / cntEvents )
# order by occurence of event
harmByEvent = arrange(harmByEvent, -cntEvents)
# convert event types to lowercase format
harmByEvent$EVTYPE = paste( tolower(harmByEvent$EVTYPE), " (", harmByEvent$cntEvents, ")" )
# plot top ten
# create plot data frame and melt (for easier plotting)
dfPlot = melt(harmByEvent[1:10,][c('EVTYPE', 'avgFatalities', 'avgInjuries')], id.vars='EVTYPE')
dfPlot = arrange(dfPlot, variable, -value)
# plot top ten events
ggplot(dfPlot, aes(x = EVTYPE, y = value, color = variable)) +
geom_point(stat = 'identity', size = 3) +
scale_x_discrete(limits = dfPlot$EVTYPE[1:10]) +
coord_flip() +
xlab('event type (n)') + ylab('average harms per event') +
theme_bw() +
ggtitle('average harms (injuries/fatalities)\nby event type')
# create data frame of property damage by event type
costByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalPropDamage = sum(propDamage), avgPropDamage = totalPropDamage / cntEvents )
# order by occurence of event
costByEvent = arrange(costByEvent, -cntEvents)
# convert event types to lowercase format
costByEvent$EVTYPE = paste0( tolower(costByEvent$EVTYPE), " (", costByEvent$cntEvents, ")" )
# plot top ten
# create plot data frame
dfCostPlot = costByEvent[1:10, ]
dfCostPlot = arrange(dfCostPlot, -avgPropDamage)
# plot top ten events
ggplot(dfCostPlot, aes(x = EVTYPE, y = avgPropDamage) ) +
geom_bar(stat = 'identity') +
scale_x_discrete(limits = dfCostPlot$EVTYPE[1:10]) +
coord_flip() +
xlab('event type (n)') + ylab('average property damage per event') +
theme_bw() + ggtitle('average property damage\nby event type')
# create data frame of property damage by event type
costByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalPropDamage = sum(propDamage), avgPropDamage = totalPropDamage / cntEvents )
harmByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalFatalities = sum(FATALITIES), totalInjuries = sum(INJURIES),
avgFatalities = totalFatalities / cntEvents, avgInjuries = totalInjuries / cntEvents )
harmByEvent = arrange(harmByEvent, -cntEvents)
harmByEvent$EVTYPE = paste( tolower(harmByEvent$EVTYPE), " (", harmByEvent$cntEvents, ")" )
# create data frame of property damage by event type
costByEvent = rawStorm %.%
group_by(EVTYPE) %.%
summarize(cntEvents = n(), totalPropDamage = sum(propDamage), avgPropDamage = totalPropDamage / cntEvents )
# order by occurence of event
costByEvent = arrange(costByEvent, -cntEvents)
# convert event types to lowercase format
costByEvent$EVTYPE = paste0( tolower(costByEvent$EVTYPE), " (", costByEvent$cntEvents, ")" )
# plot top ten
# create plot data frame
dfCostPlot = costByEvent[1:10, ]
dfCostPlot = arrange(dfCostPlot, -avgPropDamage)
# plot top ten events
ggplot(dfCostPlot, aes(x = EVTYPE, y = avgPropDamage) ) +
geom_bar(stat = 'identity') +
scale_x_discrete(limits = dfCostPlot$EVTYPE[1:10]) +
coord_flip() +
xlab('event type (n)') + ylab('average property damage per event') +
theme_bw() + ggtitle('average property damage\nby event type')
summary(rawStorm)
